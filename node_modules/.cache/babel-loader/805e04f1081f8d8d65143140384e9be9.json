{"ast":null,"code":"// icons\nimport best_sustainable from '../../images/best-sustainable.png';\nimport worst_sustainable from '../../images/worst-sustainable.png';\nimport mid_sustainable from '../../images/mid-sustainable.png';\nimport spice_icon from '../../images/spice.png';\nimport nutseed_icon from '../../images/nutseed.png';\nimport fruit_icon from '../../images/fruit.png';\nimport animalproduct_icon from '../../images/animalproduct.png';\nimport dish_icon from '../../images/dish.png';\nimport beverage_icon from '../../images/beverage.png';\nimport best_aroma from '../../images/best-aroma.png';\nimport worst_aroma from '../../images/worst-aroma.png';\nimport mid_aroma from '../../images/mid-aroma.png';\nimport best_taste from '../../images/best-taste.png';\nimport worst_taste from '../../images/worst-taste.png';\nimport mid_taste from '../../images/mid-taste.png'; // constants\n\nconst DIGIT_AFTER_POINT = 100;\nexport function customDietName(param) {\n  if (param === \"Kosher\") {\n    return \"KOSHER\";\n  } else if (param === \"Katogenic\") {\n    return \"KETOGENIC\";\n  } else {\n    return \"VEGAN\";\n  }\n}\nexport const matchImg = dish_name => {\n  if (dish_name.startsWith('fruit')) {\n    return fruit_icon;\n  } else if (dish_name.startsWith('beverage')) {\n    return beverage_icon;\n  } else if (dish_name.startsWith('nutseed')) {\n    return nutseed_icon;\n  } else if (dish_name.startsWith('animalproduct')) {\n    return animalproduct_icon;\n  } else if (dish_name.startsWith('spice')) {\n    return spice_icon;\n  } else {\n    return dish_icon;\n  }\n};\n/**\n *  Becuase the logic behind the avg a negitive number will be good indication and positive will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} sustaibleIndication \n */\n\nexport const sustaibleIndication = sustainableScore => {\n  if (sustainableScore < -3) {\n    return best_sustainable;\n  } else if (sustainableScore < 3) {\n    return mid_sustainable;\n  } else {\n    return worst_sustainable;\n  }\n};\n/**\n *  Becuase the logic behind standard deviation a low number will be good indication and hig number will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} aromaScore - the standard deviation of  aroma catogeries intesity\n */\n\nexport const aromaIndication = aromaScore => {\n  if (aromaScore <= 1) {\n    return best_aroma;\n  } else if (aromaScore < 6) {\n    return mid_aroma;\n  } else {\n    return worst_aroma;\n  }\n};\n/**\n *  Becuase the logic behind standard deviation a low number will be good indication and hig number will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} tasteScore \n */\n\nexport const tasteIndication = tasteScore => {\n  if (tasteScore <= 1) {\n    return best_taste;\n  } else if (tasteScore < 5) {\n    return mid_taste;\n  } else {\n    return worst_taste;\n  }\n};\n/**\n * reduce the ingredint to catorgries\n * @param {object} ingredient_data \n */\n\nexport const cateogryReduce = ingredient_data => {\n  let result = {};\n  Object.values(ingredient_data).map(ing => {\n    let key = ing['category'];\n\n    if (key.startsWith('fruit') || key.startsWith('vegetable') || key.startsWith('fungus') || key.startsWith('plant') || key.startsWith('herb') || key.startsWith('seed')) {\n      return 'fruit / vegetable / plant' in result ? result['fruit / vegetable / plant'].push(ing) : result['fruit / vegetable / plant'] = [ing];\n    } else if (key.startsWith('beverage')) {\n      return 'beverage' in result ? result['beverage'].push(ing) : result['beverage'] = [ing];\n    } else if (key.startsWith('nutseed')) {\n      return 'nutseed' in result ? result['nutseed'].push(ing) : result['nutseed'] = [ing];\n    } else if (key.startsWith('spice') || key.startsWith('essentialoil') || key.startsWith('additive')) {\n      return 'spice / additive' in result ? result['spice / additive'].push(ing) : result['spice / additive'] = [ing];\n    } else if (key.startsWith('fish') || key.startsWith('meat') || key.startsWith('dairy') || key.startsWith('animalproduct')) {\n      return 'animalproduct' in result ? result['animalproduct'].push(ing) : result['animalproduct'] = [ing];\n    } else {\n      return 'dish' in result ? result['dish'].push(ing) : result['dish'] = [ing]; // key in result ? result[key].push(ing) : result[key] = [ing];\n    }\n  });\n  return result;\n};\n/**\n *  return a noramlize value in the range of [min,max] for quantity in recipe\n * @param {flaot} val in [0,1]  \n * @param {float} min - The minimum quantity of ingredint in recipe\n * @param {*} max - The maximum quantity of ingredint in recipe\n */\n\nexport function noramlizeValue(val, min, max) {\n  return (val * (max - min) + min).toFixed(1);\n}\n/**\n * return the aroma score for single ingredient\n * @param {float} aromaIntensity - Aroma intesitny by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n */\n\nexport function computeAromaScore(aromaIntensity, ingFactor) {\n  return aromaIntensity * ingFactor;\n}\n/**\n * return the aroma score for single ingredient\n * @param {float} tasteIntensity - Taste intesitny by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n */\n\nexport function computeTasteScore(tasteIntensity, ingFactor) {\n  return tasteIntensity * ingFactor;\n}\n/**\n * return the Environmental Impact value for single ingredient\n * @param {flaot} envScore - Environmental Impact by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n * @param {float} convertor - from KG/L/ML to g\n */\n\nexport function computeEnvImpactScore(envScore, ingFactor, convertor) {\n  return envScore * ingFactor * convertor;\n}\nexport function roundNumber(num) {\n  return Math.round(num * DIGIT_AFTER_POINT) / DIGIT_AFTER_POINT;\n}\nexport function roundDict(dict) {\n  for (const [key, val] of Object.entries(dict)) {\n    dict[key] = roundNumber(val);\n  }\n}","map":{"version":3,"sources":["/Users/jeanaboutboul/Desktop/Metarecipe-local/src/components/functions/control-functions.js"],"names":["best_sustainable","worst_sustainable","mid_sustainable","spice_icon","nutseed_icon","fruit_icon","animalproduct_icon","dish_icon","beverage_icon","best_aroma","worst_aroma","mid_aroma","best_taste","worst_taste","mid_taste","DIGIT_AFTER_POINT","customDietName","param","matchImg","dish_name","startsWith","sustaibleIndication","sustainableScore","aromaIndication","aromaScore","tasteIndication","tasteScore","cateogryReduce","ingredient_data","result","Object","values","map","ing","key","push","noramlizeValue","val","min","max","toFixed","computeAromaScore","aromaIntensity","ingFactor","computeTasteScore","tasteIntensity","computeEnvImpactScore","envScore","convertor","roundNumber","num","Math","round","roundDict","dict","entries"],"mappings":"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","sourcesContent":["// icons\nimport best_sustainable from '../../images/best-sustainable.png';\nimport worst_sustainable from '../../images/worst-sustainable.png';\nimport mid_sustainable from '../../images/mid-sustainable.png';\n\nimport spice_icon from '../../images/spice.png'\nimport nutseed_icon from '../../images/nutseed.png'\nimport fruit_icon from '../../images/fruit.png'\nimport animalproduct_icon from '../../images/animalproduct.png'\nimport dish_icon from '../../images/dish.png';\nimport beverage_icon from '../../images/beverage.png';\n\n\n\nimport best_aroma from '../../images/best-aroma.png';\nimport worst_aroma from '../../images/worst-aroma.png';\nimport mid_aroma from '../../images/mid-aroma.png';\nimport best_taste from '../../images/best-taste.png';\nimport worst_taste from '../../images/worst-taste.png';\nimport mid_taste from '../../images/mid-taste.png';\n\n\n// constants\nconst DIGIT_AFTER_POINT = 100\n\n\nexport function customDietName(param) {\n    if (param === \"Kosher\") {\n        return \"KOSHER\";\n    } else if (param === \"Katogenic\") {\n        return \"KETOGENIC\";\n    } else {\n        return \"VEGAN\"\n    }\n}\n\n\n\nexport const matchImg = (dish_name) => {\n    if (dish_name.startsWith('fruit')) {\n        return fruit_icon;\n    } else if (dish_name.startsWith('beverage')) {\n        return beverage_icon;\n    } else if (dish_name.startsWith('nutseed')) {\n        return nutseed_icon;\n    } else if (dish_name.startsWith('animalproduct')) {\n        return animalproduct_icon;\n    } else if (dish_name.startsWith('spice')) {\n        return spice_icon;\n    } else {\n        return dish_icon;\n    }\n}\n\n/**\n *  Becuase the logic behind the avg a negitive number will be good indication and positive will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} sustaibleIndication \n */\nexport const sustaibleIndication = (sustainableScore) => {\n    if (sustainableScore < -3) {\n        return best_sustainable\n    } else if (sustainableScore < 3) {\n        return mid_sustainable\n    } else {\n        return worst_sustainable\n    }\n}\n\n\n\n/**\n *  Becuase the logic behind standard deviation a low number will be good indication and hig number will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} aromaScore - the standard deviation of  aroma catogeries intesity\n */\nexport const aromaIndication = (aromaScore) => {\n    if (aromaScore <= 1) {\n        return best_aroma\n    } else if (aromaScore < 6) {\n        return mid_aroma\n    } else {\n        return worst_aroma\n    }\n}\n/**\n *  Becuase the logic behind standard deviation a low number will be good indication and hig number will be bad indication.\n *  The numbers is just for split between the option is just for feeling and should have more resreach about what is \n *  a logical number  - that why the don't in magic number\n * @param {float} tasteScore \n */\nexport const tasteIndication = (tasteScore) => {\n    if (tasteScore <= 1) {\n        return best_taste\n    } else if (tasteScore < 5) {\n        return mid_taste\n    } else {\n        return worst_taste\n    }\n}\n\n\n/**\n * reduce the ingredint to catorgries\n * @param {object} ingredient_data \n */\nexport const cateogryReduce = (ingredient_data) => {\n    let result = {};\n    Object.values(ingredient_data).map(ing => {\n        let key = ing['category'];\n        if (key.startsWith('fruit') || key.startsWith('vegetable') || key.startsWith('fungus') || key.startsWith('plant') || key.startsWith('herb') || key.startsWith('seed')) {\n            return 'fruit / vegetable / plant' in result ? result['fruit / vegetable / plant'].push(ing) : result['fruit / vegetable / plant'] = [ing];\n        } else if (key.startsWith('beverage')) {\n            return 'beverage' in result ? result['beverage'].push(ing) : result['beverage'] = [ing];\n        } else if (key.startsWith('nutseed')) {\n            return 'nutseed' in result ? result['nutseed'].push(ing) : result['nutseed'] = [ing];\n        } else if (key.startsWith('spice') || key.startsWith('essentialoil') || key.startsWith('additive')) {\n            return 'spice / additive' in result ? result['spice / additive'].push(ing) : result['spice / additive'] = [ing];\n        }\n        else if (key.startsWith('fish') ||\n            key.startsWith('meat') ||\n            key.startsWith('dairy') ||\n            key.startsWith('animalproduct')) {\n            return 'animalproduct' in result ?\n                result['animalproduct'].push(ing)\n                : result['animalproduct'] = [ing];\n        }\n        else {\n            return 'dish' in result ? result['dish'].push(ing) : result['dish'] = [ing];\n            // key in result ? result[key].push(ing) : result[key] = [ing];\n        }\n    });\n\n    return result;\n}\n\n\n\n/**\n *  return a noramlize value in the range of [min,max] for quantity in recipe\n * @param {flaot} val in [0,1]  \n * @param {float} min - The minimum quantity of ingredint in recipe\n * @param {*} max - The maximum quantity of ingredint in recipe\n */\nexport function noramlizeValue(val, min, max) {\n    return (val * (max - min) + min).toFixed(1)\n}\n\n/**\n * return the aroma score for single ingredient\n * @param {float} aromaIntensity - Aroma intesitny by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n */\nexport function computeAromaScore(aromaIntensity, ingFactor) {\n    return aromaIntensity * ingFactor;\n}\n\n/**\n * return the aroma score for single ingredient\n * @param {float} tasteIntensity - Taste intesitny by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n */\nexport function computeTasteScore(tasteIntensity, ingFactor) {\n    return tasteIntensity * ingFactor;\n}\n\n/**\n * return the Environmental Impact value for single ingredient\n * @param {flaot} envScore - Environmental Impact by category\n * @param {float} ingFactor - a noramlize value of ingredint in recipe\n * @param {float} convertor - from KG/L/ML to g\n */\nexport function computeEnvImpactScore(envScore, ingFactor, convertor) {\n    return envScore * ingFactor * convertor\n}\n\nexport function roundNumber(num) {\n    return Math.round(num * DIGIT_AFTER_POINT) / DIGIT_AFTER_POINT;\n}\n\nexport function roundDict(dict) {\n    for (const [key, val] of Object.entries(dict)) {\n        dict[key] = roundNumber(val);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}